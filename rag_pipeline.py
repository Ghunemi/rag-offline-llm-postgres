from pathlib import Path
from langchain_community.utilities import SQLDatabase
from langchain.prompts import PromptTemplate
from langchain_core.runnables import RunnableLambda
from model import LocalLLM
import os
import re

DB_URI = os.environ.get("DB_URI", "postgresql+psycopg2://g:@localhost:5432/rag_test")
MODEL_PATH = Path("models/mistral-7b-instruct-v0.2.Q4_K_M.gguf")

SQL_GENERATION_PROMPT = PromptTemplate.from_template("""
You are an expert SQL developer. Your job is to write PostgreSQL SELECT queries based on a user's natural language question.

## Instructions:
- ONLY generate a valid SQL SELECT query. No comments or explanations.
- Use JOINs only when needed (based on department_id, employee_id, etc.).
- Use LIMIT/ORDER BY only if asked.
- Use USD for money-related questions.
- Semi colons only at the end of SQL.

## Database Schema:
departments(id, name, location)  
employees(id, name, email, department_id, job_title, hired_at)  
projects(id, name, description, department_id, start_date, end_date)  
clients(id, name, industry, contact_email)  
timesheets(id, employee_id, project_id, hours_worked, work_date)  
salaries(employee_id, monthly_salary, currency)  

## Examples:
Q: What is the total salary paid to employees?  
A: SELECT SUM(monthly_salary) FROM salaries;

Q: Which employees work in the IT department?  
A: SELECT e.name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.name = 'IT';

Q: List the names and emails of all clients in the healthcare industry.  
A: SELECT name, contact_email FROM clients WHERE industry = 'healthcare';

Q: list me 2 projects.
A: SELECT p.name, p.description FROM projects p LIMIT 2;

Q: How many hours did each employee work on Project X?  
A: SELECT e.name, SUM(t.hours_worked) FROM timesheets t JOIN employees e ON t.employee_id = e.id JOIN projects p ON t.project_id = p.id WHERE p.name ILIKE '%Project X%' GROUP BY e.name;

Q: {question}  
A:
""")

ANSWER_PROMPT = PromptTemplate.from_template("""You are a helpful assistant. Given the user's question and the SQL result, write a concise natural language answer.

Question: {question}
Result: {result}
Answer:""")

def build_rag_chain():
    db = SQLDatabase.from_uri(DB_URI)
    llm = LocalLLM(str(MODEL_PATH))

    def question_to_sql_fn(inputs):
        prompt = SQL_GENERATION_PROMPT.format(question=inputs["question"])
        sql = llm(prompt)
        sql = re.sub(r"```[a-zA-Z0-9]*", "", sql)
        sql = sql.replace("```", "").strip()
        sql = re.sub(r"--.*", "", sql)
        if not sql or len(sql.strip()) == 0:
            print("[Error] Empty SQL generated by LLM.")
            return {"question": inputs["question"], "sql": "SELECT 'Error: Empty SQL'"}
        return {"question": inputs["question"], "sql": sql}

    def run_sql_fn(inputs):
        sql = inputs["sql"].strip().rstrip(";")
        if not sql.lower().startswith("select") or len(sql) < 10:
            return {"question": inputs["question"], "result": "[SQL Error] Invalid SQL."}
        try:
            result = db.run(sql)
            if isinstance(result, list) and all(isinstance(row, tuple)):
                result = "\n".join(f"- {', '.join(str(col) for col in row)}" for row in result[:10])
        except Exception as e:
            result = f"[SQL Error] {e}"
        return {"question": inputs["question"], "result": result}

    def result_to_answer_fn(inputs):
        prompt = ANSWER_PROMPT.format(**inputs)
        answer = llm(prompt)
        return {
            "question": inputs["question"],
            "result": inputs["result"],
            "answer": answer
        }

    def extract_answer(outputs):
        return outputs["answer"]

    return (
        RunnableLambda(question_to_sql_fn)
        | RunnableLambda(run_sql_fn)
        | RunnableLambda(result_to_answer_fn)
        | RunnableLambda(extract_answer)
    )